@InProceedings{bigops,
	author="Bertot, Yves
	and Gonthier, Georges
	and Ould Biha, Sidi
	and Pasca, Ioana",
	editor="Mohamed, Otmane Ait
	and Mu{\~{n}}oz, C{\'e}sar
	and Tahar, Sofi{\`e}ne",
	title="Canonical Big Operators",
	booktitle="Theorem Proving in Higher Order Logics",
	year="2008",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="86--101",
	abstract="In this paper, we present an approach to describe 
	uniformly iterated ``big'' operations, like 
	{\$}{\backslash}sum{\_}{\{}i=0{\}}^n f(i){\$}or max 
	i{\thinspace}∈{\thinspace}If(i) and to provide lemmas that 
	encapsulate all the commonly used reasoning steps on these 
	constructs.",
	isbn="978-3-540-71067-7"
}


@inproceedings{vcfloat1,
author = {Ramananandro, Tahina and Mountcastle, Paul and Meister, Beno\^{\i}t and Lethin, Richard},
title = {A Unified Coq Framework for Verifying C Programs with Floating-Point Computations},
year = {2016},
isbn = {9781450341271},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2854065.2854066},
doi = {10.1145/2854065.2854066},
abstract = {We provide concrete evidence that floating-point computations in C programs can be verified in a homogeneous verification setting based on Coq only, by evaluating the practicality of the combination of the formal semantics of CompCert Clight and the Flocq formal specification of IEEE 754 floating-point arithmetic for the verification of properties of floating-point computations in C programs. To this end, we develop a framework to automatically compute real-number expressions of C floating-point computations with rounding error terms along with their correctness proofs. We apply our framework to the complete analysis of an energy-efficient C implementation of a radar image processing algorithm, for which we provide a certified bound on the total noise introduced by floating-point rounding errors and energy-efficient approximations of square root and sine.},
booktitle = {Proceedings of the 5th ACM SIGPLAN Conference on Certified Programs and Proofs},
pages = {15–26},
numpages = {12},
keywords = {Floating-point Computations, Coq, C, Formal Verification},
location = {St. Petersburg, FL, USA},
series = {CPP 2016}
}

@unpublished{vcfloat2,
	author = {Appel,Andrew W. and Kellison, Ariel E. },
	title  = {{VCFloat2}: Floating-point error analysis in {Coq}},
	year = {2022},
                  url={https://github.com/VeriNum/vcfloat/blob/master/doc/vcfloat2.pdf}
}

@inproceedings{sozeau09:rewriting,
author="Matthieu Sozeau",
title="A New Look at Generalized Rewriting in Type Theory",
booktitle="1st Coq Workshop Proceedings",
editor="Hugo Herbelin",
publisher="Technische Universitaet Muenchen",
page="61--72",
month=aug, year=2009}


@book{barret94:templates,
title="Templates for the Solution of Linear Systems: Building Blocks for Iterative Methods",
author="Richard Barrett and Michael Berry and Tony F. Chan and James Demmel and June Donato and Jack Dongarra and Victor Eijkhout and Roldan Pozo and Charles Romine and Henk van der Vorst",
publisher="SIAM",
year=1994}
                  
@article{vst-floyd,
 author = {Cao, Qinxiang and Beringer, Lennart and Gruetter, Samuel and Dodds, Josiah and Appel, Andrew W.},
 title = {{VST-Floyd}: A Separation Logic Tool to Verify Correctness of {C} Programs},
 journal = {J. Autom. Reason.},
 issue_date = {June      2018},
 volume = {61},
 number = {1-4},
 month = jun,
 year = {2018},
 issn = {0168-7433},
 pages = {367--422},
 numpages = {56},
 acmid = {3230190},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
 keywords = {Program verification, Proof automation, Separation logic, Symbolic execution},
} 
@comment{url = {https://doi.org/10.1007/s10817-018-9457-5},
   doi = {10.1007/s10817-018-9457-5},}
                  
@article{roux_15,
  TITLE = {{Formal Proofs of Rounding Error Bounds}},
  AUTHOR = {Roux, Pierre},
  URL = {https://hal.science/hal-01091189},
  JOURNAL = {{Journal of Automated Reasoning}},
  PUBLISHER = {{Springer Verlag}},
  PAGES = {23},
  YEAR = {2015},
  DOI = {10.1007/s10817-015-9339-z},
  KEYWORDS = {floating-point arithmetic ; rounding error ; numerical analysis ; proof assistant ; Coq ; matrices ; Cholesky decomposition},
  PDF = {https://hal.science/hal-01091189v2/file/submission.pdf},
  HAL_ID = {hal-01091189},
  HAL_VERSION = {v2},
}

@ARTICLE{IEEEstd,
  author={},
  journal={IEEE Std 754-2019 (Revision of IEEE 754-2008)}, 
  title={{IEEE} Standard for Floating-Point Arithmetic}, 
  year={2019},
  volume={},
  number={},
  pages={1-84},
  doi={10.1109/IEEESTD.2019.8766229}}

  @INPROCEEDINGS{flocq,
  author={Boldo, Sylvie and Melquiond, Guillaume},
  booktitle={2011 IEEE 20th Symposium on Computer Arithmetic}, 
  title={Flocq: A Unified Library for Proving Floating-Point Algorithms in {Coq}}, 
  year={2011},
  volume={},
  number={},
  pages={243-252},
  doi={10.1109/ARITH.2011.40}}


 @article {blast,
	title = {Basic Linear Algebra Subprograms Technical ({BLAST}) Forum Standard},
	journal = {International Journal of High Performance Computing Applications: Special Issue - Part I \& II},
	volume = {16},
	number = {1-2},
	year = {2002},
	month = {2002-01},
	pages = {1-199}
}

@article{blas02,
title = {An Updated Set of Basic Linear Algebra Subprograms ({BLAS})},
year = {2002},
issue_date = {June 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {2},
issn = {0098-3500},
url = {https://doi.org/10.1145/567806.567807},
doi = {10.1145/567806.567807},
journal = {ACM Trans. Math. Softw.},
month = jun,
pages = {135–151},
numpages = {17},
keywords = {linear algebra, standards, BLAS}
}


@book{higham_book,
author = {Higham, Nicholas J.},
title = {Accuracy and Stability of Numerical Algorithms},
publisher = {Society for Industrial and Applied Mathematics},
year = {2002},
doi = {10.1137/1.9780898718027},
address = {},
edition   = {Second},
URL = {https://epubs.siam.org/doi/abs/10.1137/1.9780898718027},
eprint = {https://epubs.siam.org/doi/pdf/10.1137/1.9780898718027}
}

@article{blas02_mixed,
author = {Li, Xiaoye S. and Demmel, James W. and Bailey, David H. and Henry, Greg and Hida, Yozo and Iskandar, Jimmy and Kahan, William and Kang, Suh Y. and Kapur, Anil and Martin, Michael C. and Thompson, Brandon J. and Tung, Teresa and Yoo, Daniel J.},
title = {Design, Implementation and Testing of Extended and Mixed Precision {BLAS}},
year = {2002},
issue_date = {June 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {2},
issn = {0098-3500},
url = {https://doi.org/10.1145/567806.567808},
doi = {10.1145/567806.567808},
abstract = {This article describes the design rationale, a C implementation, and conformance testing of a subset of the new Standard for the BLAS (Basic Linear Algebra Subroutines): Extended and Mixed Precision BLAS. Permitting higher internal precision and mixed input/output types and precisions allows us to implement some algorithms that are simpler, more accurate, and sometimes faster than possible without these features. The new BLAS are challenging to implement and test because there are many more subroutines than in the existing Standard, and because we must be able to assess whether a higher precision is used for internal computations than is used for either input or output variables. We have therefore developed an automated process of generating and systematically testing these routines. Our methodology is applicable to languages besides C. In particular, our algorithms used in the testing code will be valuable to all other BLAS implementors. Our extra precision routines achieve excellent performance---close to half of the machine peak Megaflop rate even for the Level 2 BLAS, when the data access is stride one.},
journal = {ACM Trans. Math. Softw.},
month = jun,
pages = {152–205},
numpages = {54},
keywords = {double-double arithmetic, extended and mixed precision, BLAS}
}

@article{hauser96,
author = {Hauser, John R.},
title = {Handling Floating-Point Exceptions in Numeric Programs},
year = {1996},
issue_date = {March 1996},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {2},
issn = {0164-0925},
url = {https://doi.org/10.1145/227699.227701},
doi = {10.1145/227699.227701},
abstract = {There are a number of schemes for handling arithmetic exceptions that can be used to improve the speed (or alternatively the reliability) of numeric code. Overflow and underflow are the most troublesome exceptions, and depending on the context in which the exception can occur, they may be addressed either: (1) through a “brute force” reevaluation with extended range, (2) by reevaluating using a technique known as scaling, (3) by substituting an infinity or zero, or (4) in the case of underflow, with gradual underflow. In the first two of these cases, the offending computation is simply reevaluated using a safer but slower method. The latter two cases are cheaper, more automated schemes that ideally are built in as options within the computer system. Other arithmetic exceptions can be handled with similar methods. These and some other techniques are examined with an eye toward determining the support programming languages and computer systems ought to provide for floating-point exception handling. It is argued that the cheapest short-term solution would be to give full support to most of the required (as opposed to recommended) special features of the IEC/IEEE Standard for Binary Floating-Point Arithmetic. An essential part of this support would include standardized access from high-level languages to the exception flags defined by the standard. Some possibilities outside the IEEE Standard are also considered, and a few thought on possible better-structured support within programming languages are discussed.},
journal = {ACM Trans. Program. Lang. Syst.},
month = mar,
pages = {139–174},
numpages = {36},
keywords = {exception handling, arithmetic, floating-point}
}


@inproceedings{cohen2022,
author = {Cohen, Joshua M. and Wang, Qinshi and Appel, Andrew W.},
title = {Verified Erasure Correction in {Coq} with {MathComp} and {VST}},
year = {2022},
isbn = {978-3-031-13187-5},
ipublisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-031-13188-2_14},
doi = {10.1007/978-3-031-13188-2_14},
abstract = {Most methods of data transmission and storage are prone to errors, leading to data loss. Forward erasure correction (FEC) is a method to allow data to be recovered in the presence of errors by encoding the data with redundant parity information determined by an error-correcting code. There are dozens of classes of such codes, many based on sophisticated mathematics, making them difficult to verify using automated tools. In this paper, we present a formal, machine-checked proof of a C implementation of FEC based on Reed-Solomon coding. The C code has been actively used in network defenses for over 25 years, but the algorithm it implements was partially unpublished, and it uses certain optimizations whose correctness was unknown even to the code’s authors. We use Coq’s Mathematical Components library to prove the algorithm’s correctness and the Verified Software Toolchain to prove that the C program correctly implements this algorithm, connecting both using a modular, well-encapsulated structure that could easily be used to verify a high-speed, hardware version of this FEC. This is the first end-to-end, formal proof of a real-world FEC implementation; we verified all previously unknown optimizations and found a latent bug in the code.},
booktitle = {Computer Aided Verification: 34th International Conference, CAV 2022, Haifa, Israel, August 7–10, 2022, Proceedings, Part II},
pages = {272–292},
numpages = {21},
keywords = {functional correctness verification, interactive theorem proving, Reed-Solomon coding},
location = {Haifa, Israel}
}


@INPROCEEDINGS{9154493,
  author={Boldo, Sylvie and Gallois-Wong, Diane and Hilaire, Thibault},
  booktitle={2020 IEEE 27th Symposium on Computer Arithmetic (ARITH)}, 
  title={A Correctly-Rounded Fixed-Point-Arithmetic Dot-Product Algorithm}, 
  year={2020},
  volume={},
  number={},
  pages={9-16},
  doi={10.1109/ARITH48897.2020.00011}}

@inproceedings{o2008certified,
  title={Certified exact transcendental real number computation in {Coq}},
  author={O'Connor, Russell},
  booktitle={International Conference on Theorem Proving in Higher Order Logics},
  pages={246--261},
  year={2008},
  organization={Springer}
}

@article{boldo2015coquelicot,
  title={Coquelicot: A user-friendly library of real analysis for {Coq}},
  author={Boldo, Sylvie and Lelay, Catherine and Melquiond, Guillaume},
  journal={Mathematics in Computer Science},
  volume={9},
  number={1},
  pages={41--62},
  year={2015},
  publisher={Springer}
}

@inproceedings{garillot2009packaging,
  title={Packaging mathematical structures},
  author={Garillot, Fran{\c{c}}ois and Gonthier, Georges and Mahboubi, Assia and Rideau, Laurence},
  booktitle={International Conference on Theorem Proving in Higher Order Logics},
  pages={327--342},
  year={2009},
  organization={Springer}
}

@inproceedings{martin2013certified,
  title={Certified, efficient and sharp univariate {T}aylor models in {C}oq},
  author={Martin-Dorel, {\'E}rik and Rideau, Laurence and Th{\'e}ry, Laurent and Mayero, Micaela and Pasca, Ioana},
  booktitle={15th Int'l Symp. on Symbolic and Numeric Algorithms for Scientific Computing},
  pages={193--200},
  year={2013},
  organization={IEEE}
}


@phdthesis{pasca2010formal,
  title={Formal Verification for Numerical Methods},
  author={Pasca, Ioana},
  year={2010},
  school={Universit{\'e} Nice Sophia Antipolis}
}

@inproceedings{cano:hal-00779376,
  TITLE = {{Matrices {\`a} blocs et en forme canonique}},
  AUTHOR = {Cano, Guillaume and D{\'e}n{\`e}s, Maxime},
  URL = {https://hal.inria.fr/hal-00779376},
  BOOKTITLE = {{JFLA - Journ{\'e}es francophones des langages applicatifs}},
  ADDRESS = {Aussois, France},
  EDITOR = {Damien Pous and Christine Tasson},
  YEAR = {2013},
  MONTH = Feb,
  KEYWORDS = {Coq ; Matrice diagonale par blocs ; Forme normale de Smith ; Forme de Frobenius ; Th{\'e}or{\`e}me de similitude},
  PDF = {https://hal.inria.fr/hal-00779376/file/jfla2013-04.pdf},
  HAL_ID = {hal-00779376},
  HAL_VERSION = {v1},
}


@article{thiemann2021perron,
  title={A {P}erron-{F}robenius Theorem for Deciding Matrix Growth},
  author={Thiemann, Ren{\'e}},
  journal={Journal of Logical and Algebraic Methods in Programming},
  pages={100699},
  year={2021},
  publisher={Elsevier}
}

@InProceedings{10.1007/978-3-030-76384-8_20,
author="Tekriwal, Mohit
and Duraisamy, Karthik
and Jeannin, Jean-Baptiste",
editor="Dutle, Aaron
and Moscato, Mariano M.
and Titolo, Laura
and Mu{\~{n}}oz, C{\'e}sar A.
and Perez, Ivan",
title="A Formal Proof of the {Lax} Equivalence Theorem for Finite Difference Schemes",
booktitle="NASA Formal Methods",
year="2021",
publisher="Springer International Publishing",
address="Cham",
pages="322--339",
abstract="The behavior of physical systems is typically modeled using differential equations which are too complex to solve analytically. In practical problems, these equations are discretized on a computational domain, and numerical solutions are computed. A numerical scheme is called convergent, if in the limit of infinitesimal discretization, the bounds on the discretization error is also infinitesimally small. The approximate solution converges to the ``true solution'' in this limit. The Lax equivalence theorem enables a proof of convergence given consistency and stability of the method.",
isbn="978-3-030-76384-8"
}


@article{boldo2014trusting,
  title={Trusting computations: a mechanized proof from partial differential equations to actual program},
  author={Boldo, Sylvie and Cl{\'e}ment, Fran{\c{c}}ois and Filli{\^a}tre, Jean-Christophe and Mayero, Micaela and Melquiond, Guillaume and Weis, Pierre},
  journal={Computers \& Mathematics with Applications},
  volume={68},
  number={3},
  pages={325--352},
  year={2014},
  publisher={Elsevier}
}

@article{boldo2013wave,
  title={Wave equation numerical resolution: a comprehensive mechanized proof of a {C} program},
  author={Boldo, Sylvie and Cl{\'e}ment, Fran{\c{c}}ois and Filli{\^a}tre, Jean-Christophe and Mayero, Micaela and Melquiond, Guillaume and Weis, Pierre},
  journal={Journal of Automated Reasoning},
  volume={50},
  number={4},
  pages={423--456},
  year={2013},
  publisher={Springer}
}

@inproceedings{immler2012numerical,
  title={Numerical analysis of ordinary differential equations in {Isabelle/HOL}},
  author={Immler, Fabian and H{\"o}lzl, Johannes},
  booktitle={International Conference on Interactive Theorem Proving},
  pages={377--392},
  year={2012},
  organization={Springer}
}

@phdthesis {Immler,
        author = "Immler, Fabian",
        title = "A Verified ODE Solver and Smale's 14th Problem",
        type = "Dissertation",
        school = "Technische Universit{\"a}t M{\"u}nchen",
        address = "M{\"u}nchen",
        year = 2018
}

@inproceedings{immler2016flow,
  title={The flow of {ODEs}},
  author={Immler, Fabian and Traut, Christoph},
  booktitle={International Conference on Interactive Theorem Proving},
  pages={184--199},
  year={2016},
  organization={Springer}
}

@article{immler2019flow,
  title={The flow of {ODEs}: Formalization of variational equation and {Poincar\'e} map},
  author={Immler, Fabian and Traut, Christoph},
  journal={Journal of Automated Reasoning},
  volume={62},
  number={2},
  pages={215--236},
  year={2019},
  publisher={Springer}
}

@ARTICLE{RK4,
  author={Boldo, Sylvie and Faissole, Florian and Chapoutot, Alexandre},
  journal={IEEE Transactions on Computers},
  title={Round-Off Error and Exceptional Behavior Analysis of Explicit Runge-Kutta Methods},
  year={2020},
  volume={69},
  number={12},
  pages={1745-1756},
  doi={10.1109/TC.2019.2917902}}



@article{appel_bertot,
  TITLE = {{C-language floating-point proofs layered with VST and Flocq}},
  AUTHOR = {Appel, Andrew W. and Bertot, Yves},
  JOURNAL = {{Journal of Formalized Reasoning}},
  PUBLISHER = {{ASDD-AlmaDL}},
  VOLUME = {13},
  NUMBER = {1},
  PAGES = {1-16},
  YEAR = {2020},
  MONTH = Dec,
  KEYWORDS = {C programming language ; Floating point numbers},
  PDF = {https://hal.inria.fr/hal-03130704v2/file/paper_v2.pdf},
  HAL_ID = {hal-03130704},
  HAL_VERSION = {v2},
}

@InProceedings{kellison2022,
author="Kellison, Ariel E.
and Appel, Andrew W.",
title="Verified Numerical Methods for Ordinary Differential Equations",
year="2022",
booktitle = "15th Int'l Workshop on Numerical Software Verification"
}

@article{boldo2014,
        title = {Trusting computations: A mechanized proof from partial
        differential equations to actual program},
        journal = {Computers and Mathematics with Applications},
        volume = {68},
        number = {3},
        pages = {325-352},
        year = {2014},
        author = {Sylvie Boldo and François Clément and Jean-Christophe Filliâtre
        and Micaela Mayero and Guillaume Melquiond and Pierre Weis}
}

@book{demmel_book,
author = {Demmel, James W.},
title = {Applied Numerical Linear Algebra},
publisher = {Society for Industrial and Applied Mathematics},
year = {1997},
doi = {10.1137/1.9781611971446},
address = {},
edition   = {},
URL = {https://epubs.siam.org/doi/abs/10.1137/1.9781611971446},
eprint = {https://epubs.siam.org/doi/pdf/10.1137/1.9781611971446}
}

@book{stewart_book,
author = {Stewart, G. W.},
title = {Matrix Algorithms},
publisher = {Society for Industrial and Applied Mathematics},
year = {1998},
doi = {10.1137/1.9781611971408},
address = {},
edition   = {},
URL = {https://epubs.siam.org/doi/abs/10.1137/1.9781611971408},
eprint = {https://epubs.siam.org/doi/pdf/10.1137/1.9781611971408}
}

@INPROCEEDINGS{flover2018,
  author={Becker, Heiko and Zyuzin, Nikita and Monat, Raphaël and Darulova, Eva and Myreen, Magnus O. and Fox, Anthony},
  booktitle={2018 Formal Methods in Computer Aided Design (FMCAD)}, 
  title={A Verified Certificate Checker for Finite-Precision Error Bounds in Coq and HOL4}, 
  year={2018},
  volume={},
  number={},
  pages={1-10},
  doi={10.23919/FMCAD.2018.8603019}}
  
  
@InProceedings{daisy2018,
author="Darulova, Eva
and Izycheva, Anastasiia
and Nasir, Fariha
and Ritter, Fabian
and Becker, Heiko
and Bastian, Robert",
editor="Beyer, Dirk
and Huisman, Marieke",
title="Daisy - Framework for Analysis and Optimization of Numerical Programs (Tool Paper)",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="270--287",
isbn="978-3-319-89960-2"
}

@article{fptaylor2018,
  title={Rigorous estimation of floating-point round-off errors with symbolic {T}aylor expansions},
  author={Solovyev, Alexey and Baranowski, Marek S and Briggs, Ian and Jacobsen, Charles and Rakamari{\'c}, Zvonimir and Gopalakrishnan, Ganesh},
  journal={ACM Transactions on Programming Languages and Systems},
  volume={41},
  number={1},
  pages={1--39},
  year={2018},
  publisher={ACM}
}

@inproceedings{precisa2017,
  author    = {Mariano M. Moscato and
               Laura Titolo and
               Aaron Dutle and
               C{\'{e}}sar A. Mu{\~{n}}oz},
  title     = {Automatic Estimation of Verified Floating-Point Round-Off Errors via
               Static Analysis},
  booktitle = {Computer Safety, Reliability, and Security - 36th International Conference, {SAFECOMP'17}},
  pages     = {213--229},
  year      = {2017},
  doi       = {10.1007/978-3-319-66266-4\_14}
}

@inproceedings{gappa2008,
  title={Combining {Coq} and {Gappa} for certifying floating-point programs},
  author={Boldo, Sylvie and Filli{\^a}tre, Jean-Christophe and Melquiond, Guillaume},
  booktitle={International Conference on Intelligent Computer Mathematics},
  pages={59--74},
  year={2009},
  organization={Springer}
}

@InProceedings{pvs,
author="Owre, S.
and Rushby, J. M.
and Shankar, N.",
editor="Kapur, Deepak",
title="PVS: A prototype verification system",
booktitle="Automated Deduction---CADE-11",
year="1992",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="748--752",
isbn="978-3-540-47252-0"
}

@book{mathcomp,
  author       = {Assia Mahboubi and
                  Enrico Tassi},
  title        = {Mathematical Components},
  publisher    = {Zenodo},
  year         = 2022,
  month        = sep,
  doi          = {10.5281/zenodo.7118596},
  url          = {https://doi.org/10.5281/zenodo.7118596}
}

@inproceedings{BEA,
author = {Fu, Zhoulai and Bai, Zhaojun and Su, Zhendong},
title = {Automated Backward Error Analysis for Numerical Code},
year = {2015},
isbn = {9781450336895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2814270.2814317},
doi = {10.1145/2814270.2814317},
abstract = {Numerical code uses floating-point arithmetic and necessarily suffers from roundoff and truncation errors. Error analysis is the process to quantify such uncertainty in the solution to a problem. Forward error analysis and backward error analysis are two popular paradigms of error analysis. Forward error analysis is more intuitive and has been explored and automated by the programming languages (PL) community. In contrast, although backward error analysis is more preferred by numerical analysts and the foundation for numerical stability, it is less known and unexplored by the PL community. To fill the gap, this paper presents an automated backward error analysis for numerical code to empower both numerical analysts and application developers. In addition, we use the computed backward error results to also compute the condition number, an important quantity recognized by numerical analysts for measuring how sensitive a function is to changes or errors in the input. Experimental results on Intel X87 FPU functions and widely-used GNU C Library functions demonstrate that our analysis is effective at analyzing the accuracy of floating-point programs.},
booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {639–654},
numpages = {16},
keywords = {Floating point, mathematical optimization, backward error, condition number},
location = {Pittsburgh, PA, USA},
series = {OOPSLA 2015}
}

@article{automatedBEA,
author = {Fu, Zhoulai and Bai, Zhaojun and Su, Zhendong},
title = {Automated Backward Error Analysis for Numerical Code},
year = {2015},
issue_date = {October 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/2858965.2814317},
doi = {10.1145/2858965.2814317},
abstract = {Numerical code uses floating-point arithmetic and necessarily suffers from roundoff and truncation errors. Error analysis is the process to quantify such uncertainty in the solution to a problem. Forward error analysis and backward error analysis are two popular paradigms of error analysis. Forward error analysis is more intuitive and has been explored and automated by the programming languages (PL) community. In contrast, although backward error analysis is more preferred by numerical analysts and the foundation for numerical stability, it is less known and unexplored by the PL community. To fill the gap, this paper presents an automated backward error analysis for numerical code to empower both numerical analysts and application developers. In addition, we use the computed backward error results to also compute the condition number, an important quantity recognized by numerical analysts for measuring how sensitive a function is to changes or errors in the input. Experimental results on Intel X87 FPU functions and widely-used GNU C Library functions demonstrate that our analysis is effective at analyzing the accuracy of floating-point programs.},
journal = {SIGPLAN Not.},
month = {oct},
pages = {639–654},
numpages = {16},
keywords = {mathematical optimization, condition number, backward error, Floating point}
}



